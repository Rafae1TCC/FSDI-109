.card {
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  padding: 15px;
  margin: 10px;
  align-items: center;
  z-index: 1;
}

.card:hover {
  transform: translateY(-3px);
}

.controls{
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  text-align: center;
}

.prices{
  justify-content: space-evenly;
}

.overlay{
  display: flex;
  flex-direction: row;
}

.overlay:hover{
  z-index: 2;
}

/* 
Efecto de Jokers stackeados encima


.description{
  position: absolute;
} 

  return (
    <>
        <div 
          onMouseOver={handleMouseOver} 
          onMouseOut={handleMouseOut} 
          className="product card"
          >
          {isHovered && 
          <div className="">
            <QuantityPicker onChange={handleQuantityChange} />
          </div>
          }
          <div className="description">
            {isHovered && 
              <div className="description inner-container">
                <h2>{props.data.title}</h2>
                <p>{props.data.description}</p>
                <label>{props.data.category}</label>
              </div>
            }
            <img src={props.data.image} alt="" />
            {isHovered && 
              <div className="">
                <label className="price">Price: ${props.data.price.toFixed(2)}</label>
                <button className="product green-btn" onClick={add}>
                  Add
                </button>
              </div>
            }
          </div>
          
        </div>
    </>
  );
}
  
*/